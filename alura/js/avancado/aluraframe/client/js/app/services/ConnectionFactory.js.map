{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","evento","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,wCAAYI,eAAZ,GAA8B,kBAAU;AACpCT,kDAAkBU,aAAlB,CAAgCC,OAAOC,MAAP,CAAcC,MAA9C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,kBAAU;AAC9B,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,OAAOC,MAAP,CAAcC,MAA3B;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,kBAAU;AAC5BC,wCAAQC,GAAR,CAAYP,OAAOC,MAAP,CAAcO,KAA1B;AACAf,uCAAOO,OAAOC,MAAP,CAAcO,KAAd,CAAoBC,IAA3B;AACH,6BAHD;AAIH,yBArBM,CAAP;AAsBH;;;kDAEoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACjD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC;AAChCG,+CAAe;AADiB,6BAApC;AAGH,yBALD;AAMH;;;sDAEwB;AACrB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\n    const version = 1;\n    const dbName = 'aluraframe';\n    let connection = null;\n    let close = null;\n\n    export class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possível criar instancias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n                openRequest.onupgradeneeded = evento => {\n                    ConnectionFactory._createStores(evento.target.result);\n                };\n\n                openRequest.onsuccess = evento => {\n                    if (!connection) {\n                        connection = evento.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function () {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = evento => {\n                    console.log(evento.target.error);\n                    reject(evento.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {\n                    autoIncrement: true\n                });\n            });\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n    }"]}